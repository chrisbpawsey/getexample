#!/bin/bash --login
# This is the README file is an executable script.
# To run type: ./README
#
# Example OBjECTIVE: to demostrate omp_hello.c example
# on Zeus with GNU compiler.
# omp_hello.c code is taken from
# https://computing.llnl.gov/tutorials/openMP/exercise.html
# cp the omp_hello.c source code
cp ../../src/omp_hello.c .


# This code is an OpenMP example that runs one 16-thread
# OpenMP instance with one node.

# To run this code load the necessary modules.
# and specify the total number of OpenMP threads.
# This information is located under hello_omp_gnu.slurm
# You can edit the SLURM as: emacs hello_omp_gnu.slurm &

# SLURM directives
# 
# Here we specify to SLURM that we want 1 node (--nodes=1)
# Then, we modify the partition to --partition==workq
# To run this code correctly, we comment out: --export=NONE
# If this is not commented out, the code does not run.
# To compile the code with GNU,
# we need to load the gcc module as shown below: 
module load use.paragon
module load gcc6/6.4.0 openmpi/3.1.0
ulimit -s 10240
# Create a temp-storage directory and copy data and/or executables
# Note! copying executables is not needed if modules are used.

if [ ! -d $PG/data_exe ]; then
    mkdir $PG/data_exe
fi

# Then, we set the number of threads to 16 as shown below: 
# export OMP_NUM_THREADS=16
# Therefore, to run the code we simply type:
# omplace -nt $OMP_NUM_THREADS -tm open64 ./$EXECUTABLE >> ${OUTPUT}
# It is important to note that -tm open64 should be included above in
# the omplace command because when compiling with GNU, this command
# will not be identified as the default thread model is intel.
# -tm open64 tells that the compiler module is GNU.
# An alternative way to run this job is to use the srun command as shown:
# srun -n 1 -c $OMP_NUM_THREADS ./$EXECUTABLE >> ${OUTPUT}
 
# To compile the omp_hello.c code with GNU
gcc -O3 -fopenmp -mcpu=power8 omp_hello.c -o hello_omp_gnu

cp hello_omp_gnu $PG/data_exe/.
# sanity check that the executable is there
ls -al $PG/data_exe



# To submit the job to paragon
id=$(bsub < hello_omp_gnu.lsf)
jobid=`echo $id | awk '{print $2}' | sed 's/<//g' | sed 's/>//g'`

echo "The bsub command returns what the jobid is for this job."
echo "To check the status of your job, use the lsf command:"
echo "bjobs -u $USER"
echo " "
echo "Your job will be run in $PG/run_helloOmpC_gnu/${jobid}."
echo " "
echo "Your results will be saved in ${HCCDS}/helloOmpC_gnu_results_paragon/${jobid}"
echo "and the scratch directory will then be deleted."
echo " "
echo "To check the results change to your jobid directory, type:"
echo "cd ${MYGROUP}/helloOmpC_gnu_results_paragon/${jobid}"
echo " " 
echo "To view the results, use the cat command and type:"
echo "cat helloOmpC_gnu.log"
echo " "

#  lets script run in background to until job finishes
while [[ ! -f $PG/cpt$jobid ]]; do
  sleep 2
done

#  Declare unique directory to store results
RESULTS=$HCCDS/hellowOmpC_gnu_results_paragon
###############################################
# Makes the unique directory in CDS directory for the results of this job
if [ ! -d $RESULTS ]; then 
    mkdir -p $RESULTS 
fi
echo the results directory is $RESULTS

# move results from scratch back to CDS
mv  ${PG}/run_helloOmpC_gnu/$jobid  $RESULTS

###########################
# Clean up $SCRATCH 

rm -rf ${PG}/run_helloOmpC_gnu/$jobid
rm ${PG}/cpt$jobid


