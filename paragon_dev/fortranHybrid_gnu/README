#!/bin/bash --login
# This is the README file is an executable script.
# To run type: ./README
#
# Example OBjECTIVE: to demostrate hybrid_hello.f90 example
# on Zeus with GNU Compiler. This is a mixed-mode job
# which includes both MPI and OpenMP jobs.
# cp the hybrid_hello.f90 source code
cp ../../src/hybrid_hello.f90 .

# To run this code load the necessary modules.,
# specify the total number of MPI tasks and
# the number of OpenMP threads.
# This information is located under hello_hybrid_gnu.slurm
# You can edit the SLURM as: emacs hello_hybrid_gnu.slurm 

# LSF directives
# 
# Here we specify to LSF that we want 2 nodes 
## BSUB -n (total number of cores) 
# note paragon has 16 cores per node 

# To compile with GNU compiler, 
# we need to load gcc as shown below:
#module load use.paragon
module load gcc/7.4.0 openmpi/3.1.3
ulimit -s 10240

# Create a temp-storage directory and copy data and/or executables
# Note! copying executables may not be needed if modules are used.
# 
if [ ! -d $PG/data_exe ]; then
    mkdir $PG/data_exe
fi

# This script requires 2 nodes and runs 1 MPI process with
# 16 OpenMP threads on each compiled executable.
# Hence, we set the number of threads to 16 as shown below: 
# export OMP_NUM_THREADS=16
# Therefore, the srun command looks like:
# mpirun -npernode 1 ./$EXECUTABLE >> ${OUTPUT}


# To compile the hybrid_hello.f90 code with GNU compiler
mpif90 -O3 -fopenmp -mcpu=power8 hybrid_hello.f90 -o hello_hybrid_gnu

# copy the executable to the data_exe directory on paragon scratch.
cp hello_hybrid_gnu $PG/data_exe/.
# sanity check that the executable is there
ls -al $PG/data_exe

# To submit the job to paragon
id=$(bsub < hello_hybrid_gnu.lsf)
jobid=`echo $id | awk '{print $2}' | sed 's/<//g' | sed 's/>//g'`

echo "The bsub command returns what the jobid is for this job."
echo "To check the status of your job, use the slurm command:"
echo "bjobs-u $USER"
echo " "
echo "Your job will be run in $PG/run_fortranHybrid_gnu/${jobid}."
echo " "
echo "Your results will be saved in ${HCCDS}/fortranHybrid_gnu_results_paragon/${jobid}"
echo "and the scratch directory will then be deleted."
echo " "
echo "To check the results change to your jobid directory, type:"
echo "cd $HCCDS/fortranHybrid_gnu_results_paragon/${jobid}"
echo " " 
echo "To view the results, use the cat command and type:"
echo "cat fortranHybrid_gnu.log"
echo " "

#  lets script run in background to until job finishes
while [[ ! -f $PG/cpt$jobid ]]; do
  sleep 2
done

#  Declare unique directory to store results
RESULTS=$HCCDS/hellowOmpC_gnu_results_paragon
###############################################
# Makes the unique directory in CDS directory for the results of this job
if [ ! -d $RESULTS ]; then 
    mkdir -p $RESULTS 
fi
echo the results directory is $RESULTS

# move results from scratch back to CDS
mv  ${PG}/run_fortranHybrid_gnu/$jobid  $RESULTS

###########################
# Clean up $SCRATCH 

rm -rf ${PG}/run_fortranHybrid_gnu/$jobid
rm ${PG}/cpt$jobid

