#!/bin/bash --login
# This is the README file is an executable script.
# To run type: ./README
#
# Example OBjECTIVE: to demostrate omp_hello.c example
# on Panther with GNU compiler.
# omp_hello.c code is taken from
# https://computing.llnl.gov/tutorials/openMP/exercise.html
# cp the omp_hello.c source code

#cp $GE_DIR/src/omp_hello.c .
data_in=1aki.pdb.gz
cp ../../src/gromacs_examples/${data_in} .

# This code is an OpenMP example that runs one 16-thread
# OpenMP instance with one node.

# To run this code load the necessary modules.
# and specify the total number of OpenMP threads.
# This information is located under hello_omp_gnu.slurm
# You can edit the LSF as: emacs hello_omp_gnu.slurm &

# LSF directives
# 
# Here we specify to LSF that we want 1 node (--nodes=1)
# Then, we modify the partition to --partition==workq
# To run this code correctly, we comment out: --export=NONE
# If this is not commented out, the code does not run.
# To compile the code with GNU,
# we need to load the gcc module as shown below: 
module load gcc/6.5.0 fftw/3.3.8 openmpi/3.1.3 boost/1.69.0 cuda/9.2 gromacs-gpu/2019.1
# Then, we set the number of threads to 16 as shown below: 
# export OMP_NUM_THREADS=16
# Therefore, to run the code we simply type:
# ./$EXECUTABLE >> ${OUTPUT}
pwd
# To compile the omp_hello.c code with GNU
#gcc -O2 -fopenmp omp_hello.c -o hello_omp_gnu

if [ ! -d $PG/data_exe ]; then
    mkdir $PG/data_exe
fi

cp ${data_in} $PG/data_exe/.

ls -al $PG/data_exe

# To submit the job to Paragon and extract jobid
id=$(bsub <  gromacs_ex1.lsf) 
jobid=`echo $id | awk '{print $2}' | sed 's/<//g' | sed 's/>//g'`
# 
echo " job submission id is $jobid "
#echo " my lsb_remote jobid is $LSB_REMOTEJID "

#echo "The LSF command returns what the jobid is for this job."
#echo "To check the status of your job, use the slurm command:"
#echo "bjobs -u $USER"
#echo " "
echo "Your job will be run in ${PG}/run_gromacs/${jobid}."
echo " "
echo "Your results will be saved in ${MYCDS}/gromacs_ex1_results/${jobid}"
echo "and the scratch directory will then be deleted."
#echo " "
echo "To check the results change to your jobid directory, type:"
echo "cd ${MYCDS}/gromacs_ex1_results/${jobid}"
#echo " " 
echo "To view the results, use the cat command and type:"
echo "cat gromacs.log"
#echo " "
#echo " "
#echo " "


while [[ ! -f $PG/cpt$jobid ]]; do
  sleep 2
done

RESULTS=$MYCDS/helloworld_gnu_results
###############################################
# Creates a unique directory in your GROUP directory for the results of this job
if [ ! -d $RESULTS ]; then 
    mkdir -p $RESULTS 
fi
echo the results directory is $RESULTS

cp -r  ${PG}/run_helloOmpC_gnu/$jobid  $RESULTS

#rm -rf ${PT}/run_helloOmpC_gnu/$jobi
